package chat

import (
	"context"
	"fmt"
	"log/slog"

	"github.com/gargalloeric/chatty/internal/identity"
)

type Room struct {
	// Autogenerated room identifier
	id string

	// Name is the room name assigned when created
	Name string

	logger *slog.Logger

	// Map as a set of connected clients
	clients map[*Client]struct{}

	// Messages from the clients to be broadcasted
	Broadcast chan *Message

	// Clients joining the room
	Register chan *Client

	// Clients leaving the rooom
	Unregister chan *Client

	ctx context.Context

	// Close the room and disconnect all clients
	cancel context.CancelFunc
}

func NewRoom(ctx context.Context, logger *slog.Logger, name string) *Room {
	ctx, cancel := context.WithCancel(ctx)

	id, err := identity.GenerateRandomID(16)
	if err != nil {
		panic("Unable to generate room id")
	}

	return &Room{
		id:         id,
		Name:       name,
		logger:     logger,
		clients:    make(map[*Client]struct{}),
		Broadcast:  make(chan *Message),
		Register:   make(chan *Client),
		Unregister: make(chan *Client),
		ctx:        ctx,
		cancel:     cancel,
	}
}

func (r *Room) Run() {
	for {
		select {
		case <-r.ctx.Done():
			// Gracefully shutdown triggered, disconnect all clients
			r.logger.Info("closing room", "name", r.Name, "id", r.id)
			for client := range r.clients {
				close(client.send)
				delete(r.clients, client)
			}
			return
		case client := <-r.Register:
			r.clients[client] = struct{}{}
			client.send <- &Message{ClientID: "", Data: fmt.Appendf(nil, "Welcome to the room %s", r.Name)}
		case client := <-r.Unregister:
			if _, ok := r.clients[client]; ok {
				delete(r.clients, client)
				close(client.send)
			}
		// If we recieve a message, we have to send the message to every connected client
		case message := <-r.Broadcast:
			for client := range r.clients {
				if message.ClientID != client.id {
					select {
					case client.send <- message:
					// If we cannot send the message, we assumed that the client is dead or stuck
					default:
						close(client.send)
						delete(r.clients, client)
					}
				}
			}

		}
	}
}

func (r *Room) Shutdown() {
	r.cancel()
}
